# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pr:
- master

variables:
  MATLAB_VER: R2020b
  VCPKG_BINARY_SOURCES: clear;nuget,https://pkgs.dev.azure.com/FLIMfit/FLIMfit/_packaging/vcpkg/nuget/v3/index.json,readwrite

jobs:

- job: windows
  timeoutInMinutes: 360

  variables:
    buildPlatform: 'windows'

  pool:
    name: Default
    demands: 
    - Matlab -equals $(MATLAB_VER)
    - Agent.OS -equals Windows_NT

  steps:
  - checkout: self 
    clean: true
    submodules: recursive

  - powershell: echo "##vso[task.setvariable variable=version]$(git describe)"
    displayName: 'Determine version'

  - script: .\BuildFLIMfit.bat
    displayName: 'Build FLIMfit frontend'

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/FLIMfitStandalone/Installer/'
      Contents: '*.exe'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'
      CleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'FLIMfit-$(buildPlatform)'
      targetPath: '$(Build.ArtifactStagingDirectory)/build/FLIMfit $(version) Setup x64.exe'

  - task: AzureFileCopy@3
    inputs:
      SourcePath: '$(Build.ArtifactStagingDirectory)/build/FLIMfit $(version) Setup x64.exe'
      azureSubscription: 'Pay-As-You-Go(a38da80c-0896-448b-9c6b-271c458ac013)'
      Destination: 'AzureBlob'
      storage: 'flimfit'
      ContainerName: 'builds'
      

- job: osx
  timeoutInMinutes: 360

  variables:
  - group: passwords
  - name: buildPlatform
    value: 'osx'
  - name: archiveFile
    value: '$(Build.ArtifactStagingDirectory)/flimfit-$(buildPlatform).zip'

  pool:
    name: Default
    demands: 
    - Matlab -equals 2019b
    - Agent.OS -equals Darwin

  steps:
  - checkout: self 
    clean: true
    submodules: recursive

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'sean-warren-apple-dev-cert-azure.p12'
      certPwd: '$(apple-dev-cert-password)'
      keychain: 'temp'

  - script: brew install ninja ghostscript platypus coreutils llvm libomp
    displayName: 'Setup environment'

  - script: './BuildFLIMfit.sh'
    displayName: 'Build FLIMfit' 

  - task: CopyFiles@2
    inputs:
      SourceFolder: '$(Build.SourcesDirectory)/FLIMfitStandalone/BuiltApps/*.zip'
      Contents: '*.zip'
      TargetFolder: '$(Build.ArtifactStagingDirectory)/build'
      CleanTargetFolder: true

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'FLIMfit-$(buildPlatform)'
      targetPath: '$(Build.ArtifactStagingDirectory)/build/FLIMfit_$(version)_MACI64.zip'

#  - task: AzureFileCopy@3
#    inputs:
#      SourcePath: '$(Build.ArtifactStagingDirectory)/build/FLIMfit_$(version)_MACI64.zip'
#      azureSubscription: 'Pay-As-You-Go(a38da80c-0896-448b-9c6b-271c458ac013)'
#      Destination: 'AzureBlob'
#      storage: 'flimfit'
#      ContainerName: 'builds'


