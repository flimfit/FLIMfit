# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- 6.0

pr:
- master

variables:
  MATLAB_VER: R2019b

jobs:

- job: osx
  timeoutInMinutes: 360

  variables:
  - group: passwords
  - name: buildPlatform
    value: 'osx'
  - name: archiveFile
    value: '$(Build.ArtifactStagingDirectory)/flimfit-$(buildPlatform).zip'

  pool:
    name: Default
    demands: 
    - Matlab -equals $(MATLAB_VER)  
    - Agent.OS -equals Darwin

  steps:
  - checkout: self 
    clean: true
    submodules: recursive

  - task: InstallAppleCertificate@2
    inputs:
      certSecureFile: 'sean-warren-apple-dev-cert-azure.p12'
      certPwd: '$(apple-dev-cert-password)'
      keychain: 'temp'

  - script: brew install ninja ghostscript platypus coreutils llvm libomp
    displayName: 'Setup environment'

  - script: | 
      echo $PATH
      './BuildFLIMfit.sh'
    displayName: 'Build FLIMfit' 

  - task: CopyFiles@2
    inputs:
      contents: '$(Build.SourcesDirectory)/FLIMfitStandalone/BuiltApps/*.zip'
      targetFolder: '$(Build.ArtifactStagingDirectory)/build'

  - task: PublishPipelineArtifact@0
    inputs:
      artifactName: 'FLIMfit-$(buildPlatform)'
      targetPath: '$(Build.ArtifactStagingDirectory)/build'

- job: windows
  timeoutInMinutes: 360

  variables:
    buildPlatform: 'windows'
    archiveFile: '$(Build.ArtifactStagingDirectory)/flimfit-$(buildPlatform).zip'

  pool:
    name: Default
    demands: 
    - Matlab -equals $(MATLAB_VER)
    - Agent.OS -equals Windows_NT

  steps:
  - checkout: self 
    clean: true
    submodules: recursive

  - powershell: |
      $tag_version = $(git describe --abbrev=8)
      Write-Host '##vso[task.setvariable variable=version;isOutput=true]$tag_version'
  
  - script: .\build-mex.bat
    displayName: 'Build FLIMfit mex files'

  - script: .\build-flimfit.bat
    displayName: 'Build FLIMfit frontend'

  - task: CopyFiles@2
    inputs:
      contents: '$(Build.SourcesDirectory)/FLIMfitStandalone/Installer/*.exe'
      targetFolder: '$(Build.ArtifactStagingDirectory)/$(version)'

  - task: PythonScript@0
    displayName: Upload Installer
    inputs:
      scriptSource: filePath
      scriptPath: 'gcs_upload.py'
      arguments: 'FLIMfitStandalone/Installer/FLIMfit {version} Setup x64.exe latest/{version}/FLIMfit {version} Setup x64.exe'

  - task: PythonScript@0
    displayName: Upload Libraries
    inputs:
      scriptSource: filePath
      scriptPath: 'gcs_upload.py'
      arguments: 'FLIMfitFrontEnd/flimfit_libraries_pcwin64_{version}.zip latest/{version}/flimfit_libraries_pcwin64_{version}.zip'
  